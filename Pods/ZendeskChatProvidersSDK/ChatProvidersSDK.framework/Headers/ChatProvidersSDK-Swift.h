
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZDKChatAccountStatus : NSInteger;
@class ZDKDepartment;

SWIFT_CLASS_NAMED("Account")
@interface ZDKChatAccount : NSObject
/// The current status of the <code>Account</code>
@property (nonatomic, readonly) enum ZDKChatAccountStatus accountStatus;
/// <code>[Department]</code> in the chat instance
@property (nonatomic, readonly, copy) NSArray<ZDKDepartment *> * _Nullable departments;
- (nonnull instancetype)initWithAccountStatus:(enum ZDKChatAccountStatus)accountStatus departments:(NSArray<ZDKDepartment *> * _Nullable)departments OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns TRUE if department with given name exists
- (BOOL)containsDepartmentWith:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKObservationToken;

/// <code>ZDKChatAccountProvider</code> gives the ability to observe account updates.
SWIFT_CLASS_NAMED("AccountProvider")
@interface ZDKChatAccountProvider : NSObject
/// Observe account updates
/// \param completion block that executes everytime there is an update to the list of <code>Account</code>
///
///
/// returns:
/// An <code>ObservationToken</code>
- (ZDKObservationToken * _Nonnull)observeAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatAccountProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)getAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nullable, NSError * _Nullable))completion;
@end

/// Account Status
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatAccountStatus, "AccountStatus", open) {
  ZDKChatAccountStatusOnline = 0,
  ZDKChatAccountStatusOffline = 1,
};


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code> represented as <code>nick</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)initWithAvatar:(NSURL * _Nullable)avatar nick:(NSString * _Nonnull)nick displayName:(NSString * _Nonnull)displayName isTyping:(BOOL)isTyping OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKChatProviders;
@class ZDKChatAPIConfiguration;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;
@class ZDKSettingsProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Called when <code>Chat</code> receives push notification with message
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// This notification is called when <code>Chat</code> session did end
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Set configuration to start <code>Chat</code> with pre-configured <code>department</code>, <code>visitorInfo</code> and <code>tags</code>.
/// NOTE: Department can be changed only before the <code>Chat</code> has started. Changing the department during the ongoing <code>Chat</code> is not allowed.
@property (nonatomic, strong) ZDKChatAPIConfiguration * _Nonnull configuration;
/// Account Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatAccountProvider * _Nullable accountProvider;)
+ (ZDKChatAccountProvider * _Nullable)accountProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Settings Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKSettingsProvider * _Nullable settingsProvider;)
+ (ZDKSettingsProvider * _Nullable)settingsProvider SWIFT_WARN_UNUSED_RESULT;
/// Account Provider
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
/// Settings Provider
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey queue:(dispatch_queue_t _Nonnull)queue;
/// Clears the cache
/// Call this method when leaving the conversation screen
- (void)clearCache;
/// Resets the visitor configuration to a clean slate allowing a new visitor to chat
/// Any ongoing chat will be ended, and locally stored information about the visitor will be cleared
- (void)resetIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = nil // "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoValue = nil
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfiguration")
@interface ZDKChatAPIConfiguration : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nullable visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
@property (nonatomic, copy) NSString * _Nullable visitorPathTwoValue;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKChatAPIConfiguration (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKChatAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachment : NSObject
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The remote <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The local <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable localURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name mimeType:(NSString * _Nonnull)mimeType size:(NSInteger)size url:(NSString * _Nonnull)url localURL:(NSURL * _Nullable)localURL;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKChatLogType : NSInteger;
enum ZDKChatParticipant : NSInteger;

/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval createdTimestamp;
/// Timestamp of when the message was modified
@property (nonatomic, readonly) NSTimeInterval lastModifiedTimestamp;
/// The type of event the log is
@property (nonatomic, readonly) enum ZDKChatLogType type;
/// Who sent the message can be user/agent/trigger
@property (nonatomic, readonly) enum ZDKChatParticipant participant;
/// If the log was created by visitor
@property (nonatomic, readonly) BOOL createdByVisitor;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachmentMessage")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Underlying attachment model
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns the <code>URL</code> associated with the attachment. Preferring local over remote. Nil if neither exist.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("ChatComment")
@interface ZDKChatComment : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull newComment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatComment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatEngine</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, open) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";


enum ZDKDeliveryStatus : NSInteger;

@interface ZDKChatLog (SWIFT_EXTENSION(ChatProvidersSDK))
@property (nonatomic, readonly) enum ZDKDeliveryStatus deliveryStatus;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatLogType, "ChatLogType", open) {
/// Chat message
  ZDKChatLogTypeMessage = 0,
/// Chat attachment message
  ZDKChatLogTypeAttachmentMessage = 1,
/// Member joined the channel
  ZDKChatLogTypeMemberJoin = 2,
/// Member left the channel
  ZDKChatLogTypeMemberLeave = 3,
/// Visitor left a comment about the chat
  ZDKChatLogTypeChatComment = 4,
/// Visitor left a rating
  ZDKChatLogTypeChatRating = 5,
/// Agent requested a rating
  ZDKChatLogTypeChatRatingRequest = 6,
};


/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Who sent the message can be user/agent/trigger
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatParticipant, "ChatParticipant", closed) {
/// Message came from an agent
  ZDKChatParticipantAgent = 0,
/// Message came from the visitor
  ZDKChatParticipantVisitor = 1,
/// Message came from an automated trigger
  ZDKChatParticipantTrigger = 2,
/// Message came from chat backend
  ZDKChatParticipantSystem = 3,
};

@class ZDKChatState;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Current chat state. Defaults to <code>ChatState.initial</code>.
/// In order to observe updates of <code>ChatState</code>, please use the <code>observeChatState</code> function.
@property (nonatomic, readonly, strong) ZDKChatState * _Nonnull chatState;
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)sendTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param completion block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nonnull)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKOfflineForm;
enum ZDKRating : NSInteger;

@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendOfflineForm:(ZDKOfflineForm * _Nonnull)offlineForm completion:(void (^ _Nullable)(ZDKOfflineForm * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendFileWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, ZDKChatAttachmentMessage * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedFileWithId:(NSString * _Nonnull)id onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendChatRating:(enum ZDKRating)rating completion:(void (^ _Nullable)(enum ZDKRating, NSError * _Nullable))completion;
- (void)sendChatComment:(NSString * _Nonnull)comment completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendEmailTranscript:(NSString * _Nonnull)email completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ChatRating")
@interface ZDKChatRating : ZDKChatLog
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatRating (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS_NAMED("ChatRatingRequest")
@interface ZDKRatingRequest : ZDKChatLog
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKRatingRequest (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat session status describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatSessionStatus, open) {
/// Initialization status.
/// Chat hasn’t started yet
  ChatSessionStatusInitializing = 0,
  ChatSessionStatusConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatSessionStatusStarted = 2,
/// Chat is ending
  ChatSessionStatusEnding = 3,
/// Chat session has ended
  ChatSessionStatusEnded = 4,
};


SWIFT_CLASS_NAMED("ChatSettings")
@interface ZDKChatSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatSettings * _Nonnull initial;)
+ (ZDKChatSettings * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// File size limit is 20 MB
@property (nonatomic, readonly) int64_t fileSizeLimit;
/// if true, sending the attachments is available
@property (nonatomic, readonly) BOOL isFileSendingEnabled;
/// Lists array of supported file types - png, jpg, jpeg
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedFileTypes;
- (nonnull instancetype)initWithFileSizeLimit:(int64_t)fileSizeLimit isFileSendingEnabled:(BOOL)isFileSendingEnabled supportedFileTypes:(NSArray<NSString *> * _Nonnull)supportedFileTypes OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>status</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull initial;)
+ (ZDKChatState * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// The chat comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Chat session id
@property (nonatomic, readonly, copy) NSString * _Nullable chatId;
/// Selected department
@property (nonatomic, readonly, strong) ZDKDepartment * _Nullable department;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The status of the current chat session.
@property (nonatomic, readonly) enum ChatSessionStatus chatSessionStatus;
/// Returns log with given message id
/// \param id message id
///
- (ZDKChatLog * _Nullable)logWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
- (nonnull instancetype)initWithAgents:(NSArray<ZDKAgent *> * _Nonnull)agents isChatting:(BOOL)isChatting chatId:(NSString * _Nullable)chatId department:(ZDKDepartment * _Nullable)department logs:(NSArray<ZDKChatLog *> * _Nonnull)logs queue:(NSInteger)queue comment:(NSString * _Nonnull)comment rating:(enum ZDKRating)rating;
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKConnectionStatus : NSInteger;

/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current status of the Connection
@property (nonatomic, readonly) enum ZDKConnectionStatus status;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection status updates. Specify a closure how the status should be handled
/// \param completion Specify how to handle the <code>ConnectionStatus</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ConnectionStatus</code>.
- (ZDKObservationToken * _Nonnull)observeConnectionStatus:(void (^ _Nonnull)(enum ZDKConnectionStatus))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStatusConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStatusConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStatusDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStatusReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStatusFailed = 4,
/// The internet connectivity appears to be offline
  ZDKConnectionStatusUnreachable = 5,
};

enum ZDKDepartmentStatus : NSInteger;

/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Activity status of the department. <code>online</code>/<code>offline</code>/<code>away</code>
@property (nonatomic, readonly) enum ZDKDepartmentStatus departmentStatus;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name departmentStatus:(enum ZDKDepartmentStatus)departmentStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end










/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Offline form is formed from the given fields:
/// visitor info - name, email, phone
/// department - department id
/// message - visitor’s message
SWIFT_CLASS_NAMED("OfflineForm")
@interface ZDKOfflineForm : NSObject
/// <code>VisitorInfo</code>
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// department id
@property (nonatomic, readonly, copy) NSString * _Nullable departmentId;
/// offline message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithVisitorInfo:(ZDKVisitorInfo * _Nullable)visitorInfo departmentId:(NSString * _Nullable)departmentId message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKOfflineForm (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
/// Current <code>VisitorInfo</code> model. Defaults to <code>VisitorInfo.initial</code>.
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nonnull visitorInfo;
/// Observe changes of the current <code>VisitorInfo</code>
/// \param completion block that executes everytime there is an update to the <code>VisitorInfo</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>VisitorInfo</code>.
- (ZDKObservationToken * _Nonnull)observeVisitorInfo:(void (^ _Nonnull)(ZDKVisitorInfo * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKSettingsProvider</code> gives the ability to observe settings updates.
SWIFT_CLASS_NAMED("SettingsProvider")
@interface ZDKSettingsProvider : NSObject
/// Current <code>Settings</code> model. Defaults to <code>ChatSettings.initial</code>.
@property (nonatomic, readonly, strong) ZDKChatSettings * _Nonnull settings;
/// Observe chat settings model
/// \param completion Specify how to handle the <code>ChatSettings</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ChatSettings</code>.
- (ZDKObservationToken * _Nonnull)observeChatSettings:(void (^ _Nonnull)(ZDKChatSettings * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKVisitorInfo * _Nonnull initial;)
+ (ZDKVisitorInfo * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param title The title for user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatProvidersSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZDKDeliveryStatus, open) {
  ZDKDeliveryStatusPending = 0,
  ZDKDeliveryStatusDelivered = 1,
  ZDKDeliveryStatusFailed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKDepartmentStatus, "ZDKDepartmentStatus", open) {
  ZDKDepartmentStatusOffline = 0,
  ZDKDepartmentStatusOnline = 1,
};

typedef SWIFT_ENUM(NSInteger, ZDKRating, open) {
  ZDKRatingNone = 0,
  ZDKRatingGood = 1,
  ZDKRatingBad = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZDKChatAccountStatus : NSInteger;
@class ZDKDepartment;

SWIFT_CLASS_NAMED("Account")
@interface ZDKChatAccount : NSObject
/// The current status of the <code>Account</code>
@property (nonatomic, readonly) enum ZDKChatAccountStatus accountStatus;
/// <code>[Department]</code> in the chat instance
@property (nonatomic, readonly, copy) NSArray<ZDKDepartment *> * _Nullable departments;
- (nonnull instancetype)initWithAccountStatus:(enum ZDKChatAccountStatus)accountStatus departments:(NSArray<ZDKDepartment *> * _Nullable)departments OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns TRUE if department with given name exists
- (BOOL)containsDepartmentWith:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKObservationToken;

/// <code>ZDKChatAccountProvider</code> gives the ability to observe account updates.
SWIFT_CLASS_NAMED("AccountProvider")
@interface ZDKChatAccountProvider : NSObject
/// Observe account updates
/// \param completion block that executes everytime there is an update to the list of <code>Account</code>
///
///
/// returns:
/// An <code>ObservationToken</code>
- (ZDKObservationToken * _Nonnull)observeAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatAccountProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)getAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nullable, NSError * _Nullable))completion;
@end

/// Account Status
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatAccountStatus, "AccountStatus", open) {
  ZDKChatAccountStatusOnline = 0,
  ZDKChatAccountStatusOffline = 1,
};


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code> represented as <code>nick</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)initWithAvatar:(NSURL * _Nullable)avatar nick:(NSString * _Nonnull)nick displayName:(NSString * _Nonnull)displayName isTyping:(BOOL)isTyping OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKChatProviders;
@class ZDKChatAPIConfiguration;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;
@class ZDKSettingsProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Called when <code>Chat</code> receives push notification with message
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// This notification is called when <code>Chat</code> session did end
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Set configuration to start <code>Chat</code> with pre-configured <code>department</code>, <code>visitorInfo</code> and <code>tags</code>.
/// NOTE: Department can be changed only before the <code>Chat</code> has started. Changing the department during the ongoing <code>Chat</code> is not allowed.
@property (nonatomic, strong) ZDKChatAPIConfiguration * _Nonnull configuration;
/// Account Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatAccountProvider * _Nullable accountProvider;)
+ (ZDKChatAccountProvider * _Nullable)accountProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Settings Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKSettingsProvider * _Nullable settingsProvider;)
+ (ZDKSettingsProvider * _Nullable)settingsProvider SWIFT_WARN_UNUSED_RESULT;
/// Account Provider
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
/// Settings Provider
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey queue:(dispatch_queue_t _Nonnull)queue;
/// Clears the cache
/// Call this method when leaving the conversation screen
- (void)clearCache;
/// Resets the visitor configuration to a clean slate allowing a new visitor to chat
/// Any ongoing chat will be ended, and locally stored information about the visitor will be cleared
- (void)resetIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = nil // "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoValue = nil
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfiguration")
@interface ZDKChatAPIConfiguration : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nullable visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
@property (nonatomic, copy) NSString * _Nullable visitorPathTwoValue;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKChatAPIConfiguration (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKChatAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachment : NSObject
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The remote <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The local <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable localURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name mimeType:(NSString * _Nonnull)mimeType size:(NSInteger)size url:(NSString * _Nonnull)url localURL:(NSURL * _Nullable)localURL;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKChatLogType : NSInteger;
enum ZDKChatParticipant : NSInteger;

/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval createdTimestamp;
/// Timestamp of when the message was modified
@property (nonatomic, readonly) NSTimeInterval lastModifiedTimestamp;
/// The type of event the log is
@property (nonatomic, readonly) enum ZDKChatLogType type;
/// Who sent the message can be user/agent/trigger
@property (nonatomic, readonly) enum ZDKChatParticipant participant;
/// If the log was created by visitor
@property (nonatomic, readonly) BOOL createdByVisitor;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachmentMessage")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Underlying attachment model
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns the <code>URL</code> associated with the attachment. Preferring local over remote. Nil if neither exist.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("ChatComment")
@interface ZDKChatComment : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull newComment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatComment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatEngine</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, open) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";


enum ZDKDeliveryStatus : NSInteger;

@interface ZDKChatLog (SWIFT_EXTENSION(ChatProvidersSDK))
@property (nonatomic, readonly) enum ZDKDeliveryStatus deliveryStatus;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatLogType, "ChatLogType", open) {
/// Chat message
  ZDKChatLogTypeMessage = 0,
/// Chat attachment message
  ZDKChatLogTypeAttachmentMessage = 1,
/// Member joined the channel
  ZDKChatLogTypeMemberJoin = 2,
/// Member left the channel
  ZDKChatLogTypeMemberLeave = 3,
/// Visitor left a comment about the chat
  ZDKChatLogTypeChatComment = 4,
/// Visitor left a rating
  ZDKChatLogTypeChatRating = 5,
/// Agent requested a rating
  ZDKChatLogTypeChatRatingRequest = 6,
};


/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Who sent the message can be user/agent/trigger
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatParticipant, "ChatParticipant", closed) {
/// Message came from an agent
  ZDKChatParticipantAgent = 0,
/// Message came from the visitor
  ZDKChatParticipantVisitor = 1,
/// Message came from an automated trigger
  ZDKChatParticipantTrigger = 2,
/// Message came from chat backend
  ZDKChatParticipantSystem = 3,
};

@class ZDKChatState;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Current chat state. Defaults to <code>ChatState.initial</code>.
/// In order to observe updates of <code>ChatState</code>, please use the <code>observeChatState</code> function.
@property (nonatomic, readonly, strong) ZDKChatState * _Nonnull chatState;
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)sendTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param completion block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nonnull)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKOfflineForm;
enum ZDKRating : NSInteger;

@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendOfflineForm:(ZDKOfflineForm * _Nonnull)offlineForm completion:(void (^ _Nullable)(ZDKOfflineForm * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendFileWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, ZDKChatAttachmentMessage * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedFileWithId:(NSString * _Nonnull)id onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendChatRating:(enum ZDKRating)rating completion:(void (^ _Nullable)(enum ZDKRating, NSError * _Nullable))completion;
- (void)sendChatComment:(NSString * _Nonnull)comment completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendEmailTranscript:(NSString * _Nonnull)email completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ChatRating")
@interface ZDKChatRating : ZDKChatLog
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatRating (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS_NAMED("ChatRatingRequest")
@interface ZDKRatingRequest : ZDKChatLog
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKRatingRequest (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat session status describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatSessionStatus, open) {
/// Initialization status.
/// Chat hasn’t started yet
  ChatSessionStatusInitializing = 0,
  ChatSessionStatusConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatSessionStatusStarted = 2,
/// Chat is ending
  ChatSessionStatusEnding = 3,
/// Chat session has ended
  ChatSessionStatusEnded = 4,
};


SWIFT_CLASS_NAMED("ChatSettings")
@interface ZDKChatSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatSettings * _Nonnull initial;)
+ (ZDKChatSettings * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// File size limit is 20 MB
@property (nonatomic, readonly) int64_t fileSizeLimit;
/// if true, sending the attachments is available
@property (nonatomic, readonly) BOOL isFileSendingEnabled;
/// Lists array of supported file types - png, jpg, jpeg
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedFileTypes;
- (nonnull instancetype)initWithFileSizeLimit:(int64_t)fileSizeLimit isFileSendingEnabled:(BOOL)isFileSendingEnabled supportedFileTypes:(NSArray<NSString *> * _Nonnull)supportedFileTypes OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>status</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull initial;)
+ (ZDKChatState * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// The chat comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Chat session id
@property (nonatomic, readonly, copy) NSString * _Nullable chatId;
/// Selected department
@property (nonatomic, readonly, strong) ZDKDepartment * _Nullable department;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The status of the current chat session.
@property (nonatomic, readonly) enum ChatSessionStatus chatSessionStatus;
/// Returns log with given message id
/// \param id message id
///
- (ZDKChatLog * _Nullable)logWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
- (nonnull instancetype)initWithAgents:(NSArray<ZDKAgent *> * _Nonnull)agents isChatting:(BOOL)isChatting chatId:(NSString * _Nullable)chatId department:(ZDKDepartment * _Nullable)department logs:(NSArray<ZDKChatLog *> * _Nonnull)logs queue:(NSInteger)queue comment:(NSString * _Nonnull)comment rating:(enum ZDKRating)rating;
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKConnectionStatus : NSInteger;

/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current status of the Connection
@property (nonatomic, readonly) enum ZDKConnectionStatus status;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection status updates. Specify a closure how the status should be handled
/// \param completion Specify how to handle the <code>ConnectionStatus</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ConnectionStatus</code>.
- (ZDKObservationToken * _Nonnull)observeConnectionStatus:(void (^ _Nonnull)(enum ZDKConnectionStatus))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStatusConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStatusConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStatusDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStatusReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStatusFailed = 4,
/// The internet connectivity appears to be offline
  ZDKConnectionStatusUnreachable = 5,
};

enum ZDKDepartmentStatus : NSInteger;

/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Activity status of the department. <code>online</code>/<code>offline</code>/<code>away</code>
@property (nonatomic, readonly) enum ZDKDepartmentStatus departmentStatus;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name departmentStatus:(enum ZDKDepartmentStatus)departmentStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end










/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Offline form is formed from the given fields:
/// visitor info - name, email, phone
/// department - department id
/// message - visitor’s message
SWIFT_CLASS_NAMED("OfflineForm")
@interface ZDKOfflineForm : NSObject
/// <code>VisitorInfo</code>
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// department id
@property (nonatomic, readonly, copy) NSString * _Nullable departmentId;
/// offline message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithVisitorInfo:(ZDKVisitorInfo * _Nullable)visitorInfo departmentId:(NSString * _Nullable)departmentId message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKOfflineForm (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
/// Current <code>VisitorInfo</code> model. Defaults to <code>VisitorInfo.initial</code>.
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nonnull visitorInfo;
/// Observe changes of the current <code>VisitorInfo</code>
/// \param completion block that executes everytime there is an update to the <code>VisitorInfo</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>VisitorInfo</code>.
- (ZDKObservationToken * _Nonnull)observeVisitorInfo:(void (^ _Nonnull)(ZDKVisitorInfo * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKSettingsProvider</code> gives the ability to observe settings updates.
SWIFT_CLASS_NAMED("SettingsProvider")
@interface ZDKSettingsProvider : NSObject
/// Current <code>Settings</code> model. Defaults to <code>ChatSettings.initial</code>.
@property (nonatomic, readonly, strong) ZDKChatSettings * _Nonnull settings;
/// Observe chat settings model
/// \param completion Specify how to handle the <code>ChatSettings</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ChatSettings</code>.
- (ZDKObservationToken * _Nonnull)observeChatSettings:(void (^ _Nonnull)(ZDKChatSettings * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKVisitorInfo * _Nonnull initial;)
+ (ZDKVisitorInfo * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param title The title for user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatProvidersSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZDKDeliveryStatus, open) {
  ZDKDeliveryStatusPending = 0,
  ZDKDeliveryStatusDelivered = 1,
  ZDKDeliveryStatusFailed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKDepartmentStatus, "ZDKDepartmentStatus", open) {
  ZDKDepartmentStatusOffline = 0,
  ZDKDepartmentStatusOnline = 1,
};

typedef SWIFT_ENUM(NSInteger, ZDKRating, open) {
  ZDKRatingNone = 0,
  ZDKRatingGood = 1,
  ZDKRatingBad = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZDKChatAccountStatus : NSInteger;
@class ZDKDepartment;

SWIFT_CLASS_NAMED("Account")
@interface ZDKChatAccount : NSObject
/// The current status of the <code>Account</code>
@property (nonatomic, readonly) enum ZDKChatAccountStatus accountStatus;
/// <code>[Department]</code> in the chat instance
@property (nonatomic, readonly, copy) NSArray<ZDKDepartment *> * _Nullable departments;
- (nonnull instancetype)initWithAccountStatus:(enum ZDKChatAccountStatus)accountStatus departments:(NSArray<ZDKDepartment *> * _Nullable)departments OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns TRUE if department with given name exists
- (BOOL)containsDepartmentWith:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKObservationToken;

/// <code>ZDKChatAccountProvider</code> gives the ability to observe account updates.
SWIFT_CLASS_NAMED("AccountProvider")
@interface ZDKChatAccountProvider : NSObject
/// Observe account updates
/// \param completion block that executes everytime there is an update to the list of <code>Account</code>
///
///
/// returns:
/// An <code>ObservationToken</code>
- (ZDKObservationToken * _Nonnull)observeAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatAccountProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)getAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nullable, NSError * _Nullable))completion;
@end

/// Account Status
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatAccountStatus, "AccountStatus", open) {
  ZDKChatAccountStatusOnline = 0,
  ZDKChatAccountStatusOffline = 1,
};


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code> represented as <code>nick</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)initWithAvatar:(NSURL * _Nullable)avatar nick:(NSString * _Nonnull)nick displayName:(NSString * _Nonnull)displayName isTyping:(BOOL)isTyping OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKChatProviders;
@class ZDKChatAPIConfiguration;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;
@class ZDKSettingsProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Called when <code>Chat</code> receives push notification with message
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// This notification is called when <code>Chat</code> session did end
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Set configuration to start <code>Chat</code> with pre-configured <code>department</code>, <code>visitorInfo</code> and <code>tags</code>.
/// NOTE: Department can be changed only before the <code>Chat</code> has started. Changing the department during the ongoing <code>Chat</code> is not allowed.
@property (nonatomic, strong) ZDKChatAPIConfiguration * _Nonnull configuration;
/// Account Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatAccountProvider * _Nullable accountProvider;)
+ (ZDKChatAccountProvider * _Nullable)accountProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Settings Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKSettingsProvider * _Nullable settingsProvider;)
+ (ZDKSettingsProvider * _Nullable)settingsProvider SWIFT_WARN_UNUSED_RESULT;
/// Account Provider
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
/// Settings Provider
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey queue:(dispatch_queue_t _Nonnull)queue;
/// Clears the cache
/// Call this method when leaving the conversation screen
- (void)clearCache;
/// Resets the visitor configuration to a clean slate allowing a new visitor to chat
/// Any ongoing chat will be ended, and locally stored information about the visitor will be cleared
- (void)resetIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = nil // "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoValue = nil
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfiguration")
@interface ZDKChatAPIConfiguration : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nullable visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
@property (nonatomic, copy) NSString * _Nullable visitorPathTwoValue;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKChatAPIConfiguration (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKChatAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachment : NSObject
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The remote <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The local <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable localURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name mimeType:(NSString * _Nonnull)mimeType size:(NSInteger)size url:(NSString * _Nonnull)url localURL:(NSURL * _Nullable)localURL;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKChatLogType : NSInteger;
enum ZDKChatParticipant : NSInteger;

/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval createdTimestamp;
/// Timestamp of when the message was modified
@property (nonatomic, readonly) NSTimeInterval lastModifiedTimestamp;
/// The type of event the log is
@property (nonatomic, readonly) enum ZDKChatLogType type;
/// Who sent the message can be user/agent/trigger
@property (nonatomic, readonly) enum ZDKChatParticipant participant;
/// If the log was created by visitor
@property (nonatomic, readonly) BOOL createdByVisitor;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachmentMessage")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Underlying attachment model
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns the <code>URL</code> associated with the attachment. Preferring local over remote. Nil if neither exist.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("ChatComment")
@interface ZDKChatComment : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull newComment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatComment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatEngine</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, open) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";


enum ZDKDeliveryStatus : NSInteger;

@interface ZDKChatLog (SWIFT_EXTENSION(ChatProvidersSDK))
@property (nonatomic, readonly) enum ZDKDeliveryStatus deliveryStatus;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatLogType, "ChatLogType", open) {
/// Chat message
  ZDKChatLogTypeMessage = 0,
/// Chat attachment message
  ZDKChatLogTypeAttachmentMessage = 1,
/// Member joined the channel
  ZDKChatLogTypeMemberJoin = 2,
/// Member left the channel
  ZDKChatLogTypeMemberLeave = 3,
/// Visitor left a comment about the chat
  ZDKChatLogTypeChatComment = 4,
/// Visitor left a rating
  ZDKChatLogTypeChatRating = 5,
/// Agent requested a rating
  ZDKChatLogTypeChatRatingRequest = 6,
};


/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Who sent the message can be user/agent/trigger
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatParticipant, "ChatParticipant", closed) {
/// Message came from an agent
  ZDKChatParticipantAgent = 0,
/// Message came from the visitor
  ZDKChatParticipantVisitor = 1,
/// Message came from an automated trigger
  ZDKChatParticipantTrigger = 2,
/// Message came from chat backend
  ZDKChatParticipantSystem = 3,
};

@class ZDKChatState;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Current chat state. Defaults to <code>ChatState.initial</code>.
/// In order to observe updates of <code>ChatState</code>, please use the <code>observeChatState</code> function.
@property (nonatomic, readonly, strong) ZDKChatState * _Nonnull chatState;
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)sendTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param completion block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nonnull)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKOfflineForm;
enum ZDKRating : NSInteger;

@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendOfflineForm:(ZDKOfflineForm * _Nonnull)offlineForm completion:(void (^ _Nullable)(ZDKOfflineForm * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendFileWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, ZDKChatAttachmentMessage * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedFileWithId:(NSString * _Nonnull)id onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendChatRating:(enum ZDKRating)rating completion:(void (^ _Nullable)(enum ZDKRating, NSError * _Nullable))completion;
- (void)sendChatComment:(NSString * _Nonnull)comment completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendEmailTranscript:(NSString * _Nonnull)email completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ChatRating")
@interface ZDKChatRating : ZDKChatLog
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatRating (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS_NAMED("ChatRatingRequest")
@interface ZDKRatingRequest : ZDKChatLog
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKRatingRequest (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat session status describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatSessionStatus, open) {
/// Initialization status.
/// Chat hasn’t started yet
  ChatSessionStatusInitializing = 0,
  ChatSessionStatusConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatSessionStatusStarted = 2,
/// Chat is ending
  ChatSessionStatusEnding = 3,
/// Chat session has ended
  ChatSessionStatusEnded = 4,
};


SWIFT_CLASS_NAMED("ChatSettings")
@interface ZDKChatSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatSettings * _Nonnull initial;)
+ (ZDKChatSettings * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// File size limit is 20 MB
@property (nonatomic, readonly) int64_t fileSizeLimit;
/// if true, sending the attachments is available
@property (nonatomic, readonly) BOOL isFileSendingEnabled;
/// Lists array of supported file types - png, jpg, jpeg
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedFileTypes;
- (nonnull instancetype)initWithFileSizeLimit:(int64_t)fileSizeLimit isFileSendingEnabled:(BOOL)isFileSendingEnabled supportedFileTypes:(NSArray<NSString *> * _Nonnull)supportedFileTypes OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>status</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull initial;)
+ (ZDKChatState * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// The chat comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Chat session id
@property (nonatomic, readonly, copy) NSString * _Nullable chatId;
/// Selected department
@property (nonatomic, readonly, strong) ZDKDepartment * _Nullable department;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The status of the current chat session.
@property (nonatomic, readonly) enum ChatSessionStatus chatSessionStatus;
/// Returns log with given message id
/// \param id message id
///
- (ZDKChatLog * _Nullable)logWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
- (nonnull instancetype)initWithAgents:(NSArray<ZDKAgent *> * _Nonnull)agents isChatting:(BOOL)isChatting chatId:(NSString * _Nullable)chatId department:(ZDKDepartment * _Nullable)department logs:(NSArray<ZDKChatLog *> * _Nonnull)logs queue:(NSInteger)queue comment:(NSString * _Nonnull)comment rating:(enum ZDKRating)rating;
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKConnectionStatus : NSInteger;

/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current status of the Connection
@property (nonatomic, readonly) enum ZDKConnectionStatus status;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection status updates. Specify a closure how the status should be handled
/// \param completion Specify how to handle the <code>ConnectionStatus</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ConnectionStatus</code>.
- (ZDKObservationToken * _Nonnull)observeConnectionStatus:(void (^ _Nonnull)(enum ZDKConnectionStatus))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStatusConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStatusConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStatusDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStatusReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStatusFailed = 4,
/// The internet connectivity appears to be offline
  ZDKConnectionStatusUnreachable = 5,
};

enum ZDKDepartmentStatus : NSInteger;

/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Activity status of the department. <code>online</code>/<code>offline</code>/<code>away</code>
@property (nonatomic, readonly) enum ZDKDepartmentStatus departmentStatus;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name departmentStatus:(enum ZDKDepartmentStatus)departmentStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end










/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Offline form is formed from the given fields:
/// visitor info - name, email, phone
/// department - department id
/// message - visitor’s message
SWIFT_CLASS_NAMED("OfflineForm")
@interface ZDKOfflineForm : NSObject
/// <code>VisitorInfo</code>
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// department id
@property (nonatomic, readonly, copy) NSString * _Nullable departmentId;
/// offline message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithVisitorInfo:(ZDKVisitorInfo * _Nullable)visitorInfo departmentId:(NSString * _Nullable)departmentId message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKOfflineForm (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
/// Current <code>VisitorInfo</code> model. Defaults to <code>VisitorInfo.initial</code>.
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nonnull visitorInfo;
/// Observe changes of the current <code>VisitorInfo</code>
/// \param completion block that executes everytime there is an update to the <code>VisitorInfo</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>VisitorInfo</code>.
- (ZDKObservationToken * _Nonnull)observeVisitorInfo:(void (^ _Nonnull)(ZDKVisitorInfo * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKSettingsProvider</code> gives the ability to observe settings updates.
SWIFT_CLASS_NAMED("SettingsProvider")
@interface ZDKSettingsProvider : NSObject
/// Current <code>Settings</code> model. Defaults to <code>ChatSettings.initial</code>.
@property (nonatomic, readonly, strong) ZDKChatSettings * _Nonnull settings;
/// Observe chat settings model
/// \param completion Specify how to handle the <code>ChatSettings</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ChatSettings</code>.
- (ZDKObservationToken * _Nonnull)observeChatSettings:(void (^ _Nonnull)(ZDKChatSettings * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKVisitorInfo * _Nonnull initial;)
+ (ZDKVisitorInfo * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param title The title for user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatProvidersSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZDKDeliveryStatus, open) {
  ZDKDeliveryStatusPending = 0,
  ZDKDeliveryStatusDelivered = 1,
  ZDKDeliveryStatusFailed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKDepartmentStatus, "ZDKDepartmentStatus", open) {
  ZDKDepartmentStatusOffline = 0,
  ZDKDepartmentStatusOnline = 1,
};

typedef SWIFT_ENUM(NSInteger, ZDKRating, open) {
  ZDKRatingNone = 0,
  ZDKRatingGood = 1,
  ZDKRatingBad = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatProvidersSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum ZDKChatAccountStatus : NSInteger;
@class ZDKDepartment;

SWIFT_CLASS_NAMED("Account")
@interface ZDKChatAccount : NSObject
/// The current status of the <code>Account</code>
@property (nonatomic, readonly) enum ZDKChatAccountStatus accountStatus;
/// <code>[Department]</code> in the chat instance
@property (nonatomic, readonly, copy) NSArray<ZDKDepartment *> * _Nullable departments;
- (nonnull instancetype)initWithAccountStatus:(enum ZDKChatAccountStatus)accountStatus departments:(NSArray<ZDKDepartment *> * _Nullable)departments OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Returns TRUE if department with given name exists
- (BOOL)containsDepartmentWith:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKObservationToken;

/// <code>ZDKChatAccountProvider</code> gives the ability to observe account updates.
SWIFT_CLASS_NAMED("AccountProvider")
@interface ZDKChatAccountProvider : NSObject
/// Observe account updates
/// \param completion block that executes everytime there is an update to the list of <code>Account</code>
///
///
/// returns:
/// An <code>ObservationToken</code>
- (ZDKObservationToken * _Nonnull)observeAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatAccountProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)getAccount:(void (^ _Nonnull)(ZDKChatAccount * _Nullable, NSError * _Nullable))completion;
@end

/// Account Status
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatAccountStatus, "AccountStatus", open) {
  ZDKChatAccountStatusOnline = 0,
  ZDKChatAccountStatusOffline = 1,
};


/// The <code>ZDKAgent</code> model has information about an agent in a chat session,
/// such as their backend <code>id</code> represented as <code>nick</code>, their display <code>name</code>, their <code>avatar</code>, and if they’re currently typing.
SWIFT_CLASS_NAMED("Agent")
@interface ZDKAgent : NSObject
/// ID associated with the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// The display name of the agent
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// The URL of the agent’s avatar if it’s present
@property (nonatomic, readonly, copy) NSURL * _Nullable avatar;
/// Whether the agent is currently typing in the chat
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)initWithAvatar:(NSURL * _Nullable)avatar nick:(NSString * _Nonnull)nick displayName:(NSString * _Nonnull)displayName isTyping:(BOOL)isTyping OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKChatProviders;
@class ZDKChatAPIConfiguration;
@class ZDKConnectionProvider;
@class ZDKProfileProvider;
@class ZDKPushNotificationsProvider;
@class ZDKChatProvider;
@class ZDKSettingsProvider;

/// <code>Chat</code> is a singleton class of the <code>ChatProviderSDK</code>.
/// It needs to be intialized with an <code>accountKey</code> before using any of the Chat APIs.
/// The <code>accountKey</code> can be retrieved from the Zendesk Chat dashboard.
/// \code
/// Chat.initialize(accountKey: accountKey)
///
/// \endcode
SWIFT_CLASS_NAMED("Chat")
@interface ZDKChat : NSObject
/// Called when <code>Chat</code> receives push notification with message
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationMessageReceived;)
+ (NSNotificationName _Nonnull)NotificationMessageReceived SWIFT_WARN_UNUSED_RESULT;
/// This notification is called when <code>Chat</code> session did end
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationChatEnded;)
+ (NSNotificationName _Nonnull)NotificationChatEnded SWIFT_WARN_UNUSED_RESULT;
/// Account key
@property (nonatomic, readonly, copy) NSString * _Nonnull accountKey;
/// Grouping of Zendesk Chat’s providers
@property (nonatomic, readonly, strong) ZDKChatProviders * _Nonnull providers;
/// Static instance of the Chat provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChat * _Nullable instance;)
+ (ZDKChat * _Nullable)instance SWIFT_WARN_UNUSED_RESULT;
/// Set configuration to start <code>Chat</code> with pre-configured <code>department</code>, <code>visitorInfo</code> and <code>tags</code>.
/// NOTE: Department can be changed only before the <code>Chat</code> has started. Changing the department during the ongoing <code>Chat</code> is not allowed.
@property (nonatomic, strong) ZDKChatAPIConfiguration * _Nonnull configuration;
/// Account Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatAccountProvider * _Nullable accountProvider;)
+ (ZDKChatAccountProvider * _Nullable)accountProvider SWIFT_WARN_UNUSED_RESULT;
/// Connection Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKConnectionProvider * _Nullable connectionProvider;)
+ (ZDKConnectionProvider * _Nullable)connectionProvider SWIFT_WARN_UNUSED_RESULT;
/// Profile Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKProfileProvider * _Nullable profileProvider;)
+ (ZDKProfileProvider * _Nullable)profileProvider SWIFT_WARN_UNUSED_RESULT;
/// Push Notifications Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKPushNotificationsProvider * _Nullable pushNotificationsProvider;)
+ (ZDKPushNotificationsProvider * _Nullable)pushNotificationsProvider SWIFT_WARN_UNUSED_RESULT;
/// Chat Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatProvider * _Nullable chatProvider;)
+ (ZDKChatProvider * _Nullable)chatProvider SWIFT_WARN_UNUSED_RESULT;
/// Settings Provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKSettingsProvider * _Nullable settingsProvider;)
+ (ZDKSettingsProvider * _Nullable)settingsProvider SWIFT_WARN_UNUSED_RESULT;
/// Account Provider
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
/// Connection Provider
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
/// Push Notifications Provider
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
/// Profile Provider
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
/// Chat Provider
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
/// Settings Provider
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
/// Initializes chat with Chat’s accountkey
/// \param accountKey The accountKey from your chat instance
///
/// \param queue the queue to dispatch chat operations on. Default is <code>.main</code>
///
+ (void)initializeWithAccountKey:(NSString * _Nonnull)accountKey queue:(dispatch_queue_t _Nonnull)queue;
/// Clears the cache
/// Call this method when leaving the conversation screen
- (void)clearCache;
/// Resets the visitor configuration to a clean slate allowing a new visitor to chat
/// Any ongoing chat will be ended, and locally stored information about the visitor will be cleared
- (void)resetIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;

@interface ZDKChat (SWIFT_EXTENSION(ChatProvidersSDK))
/// Sends push token to server
/// \param pushTokenData device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration
///
+ (void)registerPushToken:(NSData * _Nonnull)pushTokenData;
/// Pass the received remote notification to <code>didReceiveRemoteNotification</code>.
/// If the push notification belongs to Zendesk Chat, the push notification will be processed accordingly
/// There are currently two types of supported Push Notifications:
/// <ul>
///   <li>
///     <code>New chat message</code>
///     <ul>
///       <li>
///         This event happens, when there’s new message typed by an agent.
///         In order to respond to this event, you can observe the notification with name
///         <code>PushNotificationsProvider.ChatMessageReceivedNotification</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>Chat has ended</code>
///     <ul>
///       <li>
///         When this event is received, the Chat will be ended and the chat session will be disconnected
///         In order to respond to this event, you can observe the notification with name
///         <code>Chat.NotificationChatEnded</code> in <code>NotificationCenter</code>.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
+ (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
@end

@class ZDKVisitorInfo;

/// A set of configurations that are associated with each chat session.
/// <h2>Default values</h2>
/// \code
/// visitorPathOne = nil // "Direct Path"
/// visitorPathTwo = "Zendesk Chat SDK v\(VersionNumber)"
/// visitorPathTwoValue = nil
/// tags = []
/// department = nil
/// visitorInfo = nil
///
/// \endcode
SWIFT_CLASS_NAMED("ChatAPIConfiguration")
@interface ZDKChatAPIConfiguration : NSObject
/// This string will be placed in the first line of the visitor path.
/// Defaults to “Direct Path” if not specified.
@property (nonatomic, copy) NSString * _Nullable visitorPathOne;
/// This string will be placed in the second line of the visitor path.
/// Defaults to “Zendesk Chat SDK v(ChatProvidersSDKVersionNumber)”
@property (nonatomic, copy) NSString * _Nonnull visitorPathTwo;
/// This string can be found when hovering over the second line of the visitor path.
@property (nonatomic, copy) NSString * _Nullable visitorPathTwoValue;
/// The tags to be set when a chat starts.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull tags;
/// The department to be set when a chat starts.
/// default is <code>nil</code>
@property (nonatomic, copy) NSString * _Nullable department;
/// Set the visitor info.
/// Default is <code>nil</code>. Pass through fields as empty strings to clear info.
@property (nonatomic, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZDKChatAPIConfiguration (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKChatAttachment</code> model, contains information about attachments that were sent or received
/// by the visitor.
SWIFT_CLASS_NAMED("ChatAttachment")
@interface ZDKChatAttachment : NSObject
/// <code>Name</code> of the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// <code>Mimetype</code> associated with the attachment
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The <code>size</code> of the attachment in kb
@property (nonatomic, readonly) NSInteger size;
/// The remote <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The local <code>url</code> where the attachemt is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable localURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name mimeType:(NSString * _Nonnull)mimeType size:(NSInteger)size url:(NSString * _Nonnull)url localURL:(NSURL * _Nullable)localURL;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ZDKChatLogType : NSInteger;
enum ZDKChatParticipant : NSInteger;

/// Base class for chat log events that may occur in a chat session
/// Different LogTypes
/// <ul>
///   <li>
///     <code>ChatMessage</code>, <code>ChatAttachment</code>,  <code>ChatMemberJoin</code>, <code>ChatMemberLeave</code>
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatLog")
@interface ZDKChatLog : NSObject
/// ID
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Identifier associated with the sender. Used to distinguish <code>sender</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
/// Display Name
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
/// Timestamp of when the message was sent
@property (nonatomic, readonly) NSTimeInterval createdTimestamp;
/// Timestamp of when the message was modified
@property (nonatomic, readonly) NSTimeInterval lastModifiedTimestamp;
/// The type of event the log is
@property (nonatomic, readonly) enum ZDKChatLogType type;
/// Who sent the message can be user/agent/trigger
@property (nonatomic, readonly) enum ZDKChatParticipant participant;
/// If the log was created by visitor
@property (nonatomic, readonly) BOOL createdByVisitor;
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Chat Log attachment
SWIFT_CLASS_NAMED("ChatAttachmentMessage")
@interface ZDKChatAttachmentMessage : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Underlying attachment model
@property (nonatomic, readonly, strong) ZDKChatAttachment * _Nonnull attachment;
/// Returns the <code>URL</code> associated with the attachment. Preferring local over remote. Nil if neither exist.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("ChatComment")
@interface ZDKChatComment : ZDKChatLog
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull newComment;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatComment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Potential errors returned from the ChatProviderSDK
/// <ul>
///   <li>
///     <code>chatIsNotInitialized</code>
///     Will be thrown if the Chat instance isn’t initialized before initializing <code>ChatEngine</code>
///   </li>
///   <li>
///     <code>disconnected</code>
///     Will be emitted when a request is attempted to be sent, but the connection state is disconnected.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ChatError, open) {
/// Chat was not initialized
  ChatErrorChatIsNotInitialized = 0,
/// Chat is disconnected
  ChatErrorDisconnected = 1,
};
static NSString * _Nonnull const ChatErrorDomain = @"ChatProvidersSDK.ChatError";


enum ZDKDeliveryStatus : NSInteger;

@interface ZDKChatLog (SWIFT_EXTENSION(ChatProvidersSDK))
@property (nonatomic, readonly) enum ZDKDeliveryStatus deliveryStatus;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatLogType, "ChatLogType", open) {
/// Chat message
  ZDKChatLogTypeMessage = 0,
/// Chat attachment message
  ZDKChatLogTypeAttachmentMessage = 1,
/// Member joined the channel
  ZDKChatLogTypeMemberJoin = 2,
/// Member left the channel
  ZDKChatLogTypeMemberLeave = 3,
/// Visitor left a comment about the chat
  ZDKChatLogTypeChatComment = 4,
/// Visitor left a rating
  ZDKChatLogTypeChatRating = 5,
/// Agent requested a rating
  ZDKChatLogTypeChatRatingRequest = 6,
};


/// Chat Member Join event
SWIFT_CLASS_NAMED("ChatMemberJoin")
@interface ZDKChatMemberJoin : ZDKChatLog
@end




@interface ZDKChatMemberJoin (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat Member Leave event
SWIFT_CLASS_NAMED("ChatMemberLeave")
@interface ZDKChatMemberLeave : ZDKChatLog
@end




@interface ZDKChatMemberLeave (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


/// Chat message
SWIFT_CLASS_NAMED("ChatMessage")
@interface ZDKChatMessage : ZDKChatLog
/// Message from sender
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatMessage (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Who sent the message can be user/agent/trigger
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKChatParticipant, "ChatParticipant", closed) {
/// Message came from an agent
  ZDKChatParticipantAgent = 0,
/// Message came from the visitor
  ZDKChatParticipantVisitor = 1,
/// Message came from an automated trigger
  ZDKChatParticipantTrigger = 2,
/// Message came from chat backend
  ZDKChatParticipantSystem = 3,
};

@class ZDKChatState;

/// The <code>ZDKChatProvider</code> provides APIs to interact and observe the current Chat session.
/// It provides APIs to:
/// <ul>
///   <li>
///     proactively request a chat
///   </li>
///   <li>
///     send messages
///   </li>
///   <li>
///     handle failed messages (retry/delete)
///   </li>
///   <li>
///     set the visitors’ typing indicator
///   </li>
///   <li>
///     end the chat
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatProvider")
@interface ZDKChatProvider : NSObject
/// Current chat state. Defaults to <code>ChatState.initial</code>.
/// In order to observe updates of <code>ChatState</code>, please use the <code>observeChatState</code> function.
@property (nonatomic, readonly, strong) ZDKChatState * _Nonnull chatState;
/// Proactively lets an agent know that the user wants to chat.
- (void)requestChat;
/// Let’s the agent know when the visitor is typing.
/// If <code>true</code>, the visitor typing indicator will appear in agent dashboard, else it will be hidden.
/// \param isTyping isTyping
///
- (void)sendTypingWithIsTyping:(BOOL)isTyping;
/// Observe changes of the current chat’s state
/// The conversation thread can be accessed through the <code>logs</code>
/// \param completion block that executes everytime there is an update to the <code>ChatState</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription  to the <code>ChatState</code>.
- (ZDKObservationToken * _Nonnull)observeChatState:(void (^ _Nonnull)(ZDKChatState * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKOfflineForm;
enum ZDKRating : NSInteger;

@interface ZDKChatProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)sendMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendOfflineForm:(ZDKOfflineForm * _Nonnull)offlineForm completion:(void (^ _Nullable)(ZDKOfflineForm * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)deleteFailedMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendFileWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, ZDKChatAttachmentMessage * _Nullable, NSError * _Nullable))completion;
- (void)resendFailedFileWithId:(NSString * _Nonnull)id onProgress:(void (^ _Nullable)(double))onProgress completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendChatRating:(enum ZDKRating)rating completion:(void (^ _Nullable)(enum ZDKRating, NSError * _Nullable))completion;
- (void)sendChatComment:(NSString * _Nonnull)comment completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)sendEmailTranscript:(NSString * _Nonnull)email completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)endChat:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("ChatRating")
@interface ZDKChatRating : ZDKChatLog
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKChatRating (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end


SWIFT_CLASS_NAMED("ChatRatingRequest")
@interface ZDKRatingRequest : ZDKChatLog
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ZDKRatingRequest (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// Chat session status describes current state of the session
typedef SWIFT_ENUM(NSInteger, ChatSessionStatus, open) {
/// Initialization status.
/// Chat hasn’t started yet
  ChatSessionStatusInitializing = 0,
  ChatSessionStatusConfiguring = 1,
/// Chat is ready to send & receive messages
  ChatSessionStatusStarted = 2,
/// Chat is ending
  ChatSessionStatusEnding = 3,
/// Chat session has ended
  ChatSessionStatusEnded = 4,
};


SWIFT_CLASS_NAMED("ChatSettings")
@interface ZDKChatSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatSettings * _Nonnull initial;)
+ (ZDKChatSettings * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// File size limit is 20 MB
@property (nonatomic, readonly) int64_t fileSizeLimit;
/// if true, sending the attachments is available
@property (nonatomic, readonly) BOOL isFileSendingEnabled;
/// Lists array of supported file types - png, jpg, jpeg
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull supportedFileTypes;
- (nonnull instancetype)initWithFileSizeLimit:(int64_t)fileSizeLimit isFileSendingEnabled:(BOOL)isFileSendingEnabled supportedFileTypes:(NSArray<NSString *> * _Nonnull)supportedFileTypes OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKQueuePosition;

/// <code>ZDKChatState</code> is a model representation of the current chat session.
/// Can gather information about the <code>agents</code> in the session, the visitor’s <code>queuePosition</code>,
/// what <code>status</code> the chat is in, and the list of <code>logs</code> in the session
SWIFT_CLASS_NAMED("ChatState")
@interface ZDKChatState : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKChatState * _Nonnull initial;)
+ (ZDKChatState * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// The chat comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// The chat rating
@property (nonatomic, readonly) enum ZDKRating ratingValue;
/// <code>[Agent]</code> assigned to the channel
@property (nonatomic, readonly, copy) NSArray<ZDKAgent *> * _Nonnull agents;
/// Whether the chat session is active. If <code>false</code> then the chat has ended.
@property (nonatomic, readonly) BOOL isChatting;
/// Chat session id
@property (nonatomic, readonly, copy) NSString * _Nullable chatId;
/// Selected department
@property (nonatomic, readonly, strong) ZDKDepartment * _Nullable department;
/// Array of ChatLogs that have occured in the chat. eg. Member join/leave, attachments
@property (nonatomic, readonly, copy) NSArray<ZDKChatLog *> * _Nonnull logs;
/// Queue position
@property (nonatomic, strong) ZDKQueuePosition * _Nonnull queuePosition;
/// The status of the current chat session.
@property (nonatomic, readonly) enum ChatSessionStatus chatSessionStatus;
/// Returns log with given message id
/// \param id message id
///
- (ZDKChatLog * _Nullable)logWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
- (nonnull instancetype)initWithAgents:(NSArray<ZDKAgent *> * _Nonnull)agents isChatting:(BOOL)isChatting chatId:(NSString * _Nullable)chatId department:(ZDKDepartment * _Nullable)department logs:(NSArray<ZDKChatLog *> * _Nonnull)logs queue:(NSInteger)queue comment:(NSString * _Nonnull)comment rating:(enum ZDKRating)rating;
@end


@interface ZDKChatState (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

enum ZDKConnectionStatus : NSInteger;

/// <code>ZDKConnectionProvider</code> gives the ability to observe connection updates.
SWIFT_CLASS_NAMED("ConnectionProvider")
@interface ZDKConnectionProvider : NSObject
/// The current status of the Connection
@property (nonatomic, readonly) enum ZDKConnectionStatus status;
/// Connect to the session
- (void)connect;
/// Disconnect from the current session, closes the socket connection.
/// Please note, this won’t end the chat session with agent
- (void)disconnect;
/// Observe connection status updates. Specify a closure how the status should be handled
/// \param completion Specify how to handle the <code>ConnectionStatus</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ConnectionStatus</code>.
- (ZDKObservationToken * _Nonnull)observeConnectionStatus:(void (^ _Nonnull)(enum ZDKConnectionStatus))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents different states of the<code>ChatSession</code>
typedef SWIFT_ENUM_NAMED(NSInteger, ZDKConnectionStatus, "ConnectionStatus", open) {
/// Indicating the client is trying to connect to the backend.
  ZDKConnectionStatusConnecting = 0,
/// The <code>ChatSession</code> has connected to the backend and is ready to send/receive messages.
  ZDKConnectionStatusConnected = 1,
/// The <code>ChatSession</code> has disconnected. Can be caused by network connection, or a user ending
/// the session with <code>ChatSession.disconnect()</code>
  ZDKConnectionStatusDisconnected = 2,
/// The <code>ChatSession</code> is trying to reconnect to a chat that was already in session.
  ZDKConnectionStatusReconnecting = 3,
/// Failed to reconnect to the web-socket
  ZDKConnectionStatusFailed = 4,
/// The internet connectivity appears to be offline
  ZDKConnectionStatusUnreachable = 5,
};

enum ZDKDepartmentStatus : NSInteger;

/// Department model contains id associated with the department,
/// the department name, and the current status of the department.
SWIFT_CLASS_NAMED("Department")
@interface ZDKDepartment : NSObject
/// ID associated with the department
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Department name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Activity status of the department. <code>online</code>/<code>offline</code>/<code>away</code>
@property (nonatomic, readonly) enum ZDKDepartmentStatus departmentStatus;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name departmentStatus:(enum ZDKDepartmentStatus)departmentStatus;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKDepartment (SWIFT_EXTENSION(ChatProvidersSDK))
/// A textual representation of this instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end










/// Unsubscribe from observers
SWIFT_CLASS_NAMED("ObservationToken")
@interface ZDKObservationToken : NSObject
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Offline form is formed from the given fields:
/// visitor info - name, email, phone
/// department - department id
/// message - visitor’s message
SWIFT_CLASS_NAMED("OfflineForm")
@interface ZDKOfflineForm : NSObject
/// <code>VisitorInfo</code>
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nullable visitorInfo;
/// department id
@property (nonatomic, readonly, copy) NSString * _Nullable departmentId;
/// offline message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithVisitorInfo:(ZDKVisitorInfo * _Nullable)visitorInfo departmentId:(NSString * _Nullable)departmentId message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKOfflineForm (SWIFT_EXTENSION(ChatProvidersSDK))
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>ZDKProfileProvider</code> contain APIs to update information about a visitor.
/// Such as name, email, phone number, tags, and notes related to the visitor and their session.
SWIFT_CLASS_NAMED("ProfileProvider")
@interface ZDKProfileProvider : NSObject
/// Current <code>VisitorInfo</code> model. Defaults to <code>VisitorInfo.initial</code>.
@property (nonatomic, readonly, strong) ZDKVisitorInfo * _Nonnull visitorInfo;
/// Observe changes of the current <code>VisitorInfo</code>
/// \param completion block that executes everytime there is an update to the <code>VisitorInfo</code>
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>VisitorInfo</code>.
- (ZDKObservationToken * _Nonnull)observeVisitorInfo:(void (^ _Nonnull)(ZDKVisitorInfo * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZDKVisitorPath;

@interface ZDKProfileProvider (SWIFT_EXTENSION(ChatProvidersSDK))
- (void)setVisitorInfo:(ZDKVisitorInfo * _Nonnull)visitorInfo completion:(void (^ _Nullable)(ZDKVisitorInfo * _Nullable, NSError * _Nullable))completion;
- (void)trackVisitorPath:(ZDKVisitorPath * _Nonnull)visitorPath completion:(void (^ _Nullable)(ZDKVisitorPath * _Nullable, NSError * _Nullable))completion;
- (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completion;
- (void)appendNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)setNote:(NSString * _Nonnull)note completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
@end


/// <code>ZDKChatProviders</code> is a grouping of all the providers that allow you to, setup for push notifications,
/// handle session updates, handle connection state, and interact with the APIs in other ways.
SWIFT_CLASS_NAMED("Providers")
@interface ZDKChatProviders : NSObject
@property (nonatomic, readonly, strong) ZDKChatAccountProvider * _Nonnull accountProvider;
@property (nonatomic, readonly, strong) ZDKConnectionProvider * _Nonnull connectionProvider;
@property (nonatomic, readonly, strong) ZDKProfileProvider * _Nonnull profileProvider;
@property (nonatomic, readonly, strong) ZDKPushNotificationsProvider * _Nonnull pushNotificationsProvider;
@property (nonatomic, readonly, strong) ZDKChatProvider * _Nonnull chatProvider;
@property (nonatomic, readonly, strong) ZDKSettingsProvider * _Nonnull settingsProvider;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>ZDKPushNoticiationProvider</code> provides APIs to subscribe to, and handle Zendesk Chat’s Push Notifications.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PushNotificationsProvider")
@interface ZDKPushNotificationsProvider : NSObject
/// The <code>NSNotification.Name</code> associated with the message received push notificiation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull ChatMessageReceivedNotification;)
+ (NSNotificationName _Nonnull)ChatMessageReceivedNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Unregisters for Push notifications
- (void)unregisterPushToken;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Received push notification is processed by Chat SDK.
/// There are two types of chat notifications:
/// <ul>
///   <li>
///     <code>chat.msg</code> - received when a new chat message was sent from an agent
///   </li>
///   <li>
///     <code>chat.end</code> - received when the current chat session ends.
///   </li>
/// </ul>
/// \param userInfo A dictionary that contains information related to the remote notification
///
/// \param application The centralized point of control and coordination for apps running in iOS.
///
- (void)didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo in:(UIApplication * _Nonnull)application;
/// Returns <code>true</code> if received push notification belongs to Chat SDK
/// \param userInfo A dictionary that contains information related to the remote notification
///
- (BOOL)isChatPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKPushNotificationsProvider (SWIFT_EXTENSION(ChatProvidersSDK))
/// Registers device token with Zendesk Chat
/// \param pushToken device token received in <code>didRegisterForRemoteNotificationsWithDeviceToken</code> after registration.
///
- (void)registerPushToken:(NSData * _Nonnull)pushToken;
@end


/// <code>ZDKQueuePosition</code> is a model that represents the current queue position of the visitor.
SWIFT_CLASS_NAMED("QueuePosition")
@interface ZDKQueuePosition : NSObject
/// An <code>id</code> that is used to help handle updates to the queue position in the UI layer.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The visitors’ current position in the queue.
@property (nonatomic) NSInteger queue;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>ZDKSettingsProvider</code> gives the ability to observe settings updates.
SWIFT_CLASS_NAMED("SettingsProvider")
@interface ZDKSettingsProvider : NSObject
/// Current <code>Settings</code> model. Defaults to <code>ChatSettings.initial</code>.
@property (nonatomic, readonly, strong) ZDKChatSettings * _Nonnull settings;
/// Observe chat settings model
/// \param completion Specify how to handle the <code>ChatSettings</code> via closure.
///
///
/// returns:
/// An <code>ObservationToken</code> that can cancel the subscription to the <code>ChatSettings</code>.
- (ZDKObservationToken * _Nonnull)observeChatSettings:(void (^ _Nonnull)(ZDKChatSettings * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Visitor information that can be seen in the Chat dashboard
/// Contains <code>name</code>, <code>email</code>, and <code>phoneNumber</code>
/// note:
/// <code>email</code> is parsed and should be in correct email format. <code>phoneNumber</code> is not parsed.
SWIFT_CLASS_NAMED("VisitorInfo")
@interface ZDKVisitorInfo : NSObject
/// Empty chat state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZDKVisitorInfo * _Nonnull initial;)
+ (ZDKVisitorInfo * _Nonnull)initial SWIFT_WARN_UNUSED_RESULT;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// E-mail
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Phone number
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// Initializer to update the visitor’s information.
/// \param name Name
///
/// \param email E-mail
///
/// \param phoneNumber Phone number
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email phoneNumber:(NSString * _Nonnull)phoneNumber OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the receiver and a given object are equal.
/// \param object the object to compare against
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A Custom Update Event that can be seen in the agent dashboard.
/// The <code>VisitorPath</code> API is a way to know if visitors have performed certain events in your app.
/// <code>VisitorPath</code> events can be queued before a chat has started,
/// and they’ll be sent when the first message is sent.
/// note:
/// The <code>url</code> field is unparsed by the backend, so it can be any <code>String</code>.
/// If subsequent <code>url</code>s are the same, only the initial <code>VisitorPath</code> update will be sent.
/// If <code>url</code> parameter of <code>VisitorPath</code> is not specified, an <code>ISO8601</code> timestamp will be sent.
SWIFT_CLASS_NAMED("VisitorPath")
@interface ZDKVisitorPath : NSObject
/// Custom title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Optional url string. <code>ISO8601</code> timestamp by default.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Initializer for <code>VisitorPath</code> updates
/// \param title The title for user-event
///
/// \param url Another string associated with the event.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKVisitorPath (SWIFT_EXTENSION(ChatProvidersSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZDKDeliveryStatus, open) {
  ZDKDeliveryStatusPending = 0,
  ZDKDeliveryStatusDelivered = 1,
  ZDKDeliveryStatusFailed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ZDKDepartmentStatus, "ZDKDepartmentStatus", open) {
  ZDKDepartmentStatusOffline = 0,
  ZDKDepartmentStatusOnline = 1,
};

typedef SWIFT_ENUM(NSInteger, ZDKRating, open) {
  ZDKRatingNone = 0,
  ZDKRatingGood = 1,
  ZDKRatingBad = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
